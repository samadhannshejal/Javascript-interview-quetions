1. What is the event loop in JavaScript?
   Explain how the event loop works and why it's important for asynchronous programming.
   Answer ‚ñ∂Ô∏è Event loop in JavaScript is crucial mechanism for handling asynchronous operations . allowing JavaScript to perform 
             non-blocking task

   How its works ‚û°Ô∏è Call stack : JavaScript uses a call stack to keep track of functions to be executed .when function  is called
                                  is pushed into call stack , once it complete then it will be pop out from call stack
                 ‚û°Ô∏è  Web APIs  : When asynchronous operations like setTimeout, HTTP requests,DOM event they are pushed into web 
                                 APIs for execution
                 ‚û°Ô∏è Task Queue: Once asynchronous operations are completed ,their corresponding callable function are pushed into 
                                 callback Queue
                 ‚û°Ô∏è Event loop: Event loop is continues monitoring call stack and call Queue, if  the call stack is empty , then 
                                event loop take the first task from Queue and push to call stack for execution
                 ‚û°Ô∏è Micro-task-Queue : Beside the task Queue ,there is micro task Queue for operations like promises , micro task
                                       having higher priority and executed task before main task Queue
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                                                                                        

2. What is the this keyword in JavaScript?
   Describe how this behaves in different contexts, including global, object methods, and event handlers.
   Answer ‚ñ∂Ô∏è. In javascript this keyword is refer the context , where function is called rather than where it defined

   Examples ‚û°Ô∏è Global Context : ‚ûñ this refer to global context  ->  console.log(this)
                                 ‚ûñ fun function (){
                                    console.log(this);
                                 }
                                 fun() // this is refer to global object because , it called in global object

            ‚û°Ô∏è Object methods :  when function is called  as an method of object   , its refer to the object itself

                                 ex : ‚ûñ const obj ={
                                    name :'samadhan',
                                    fun:function (){
                                       console.log(this); // object itself
                                    }
                                 }   
                                 obj.fun()  

                                ‚ûñ const obj ={
                                    name :'samadhan',
                                    fun:function (){
                                       console.log(this); // window object 
                                    }
                                 }   
                                const fun1= obj.fun() 
                                fun1() 

            ‚û°Ô∏è Event handlers : In event handlers, this refers to the element that fired the event.
            ‚û°Ô∏è constructor function or class : this keyword refer to the newly created object 

                              ex : function Person(){
                                 console.log(this);
                              }

                             const person= new Person();

            ‚û°Ô∏è Arrow function : arrow function don't have own this , they inherit this from   surrounding  lexical context

                      ex :  const fun=()=>{
                        console.log(this) // global 
                      } 

                      ex :  const obj={
                        name :"samadhan",
                        func:()=>{
                           console.log(this)// global
                        }
                      } 
                      obj.func()   

                      ex :    const obj={
                        name :"samadhan",
                        func:function(){
                          const innerFun= ()=>{
                           console.log(this)// global
                        }
                        innerFun()
                        }
                      } 
                      obj.func()      
                             
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                             

3. What are JavaScript Promises?
   Explain how promises work and provide an example of how to use them.
  Answer ‚ñ∂Ô∏è Promises in javascript is object , its eventual completion or failure 
            Promises is allowing to you handle asynchronous operations in very beautiful way , more readable

            Promises having 2 possible states
            1) Pending :  its initial state , operation not yet complete
            2) Fulfilled : operation completed successfully
            3) Rejected  : operation failed

            Promises are often used to handle asynchronous operation like API calls , file reading, or timers 
            Promises is allow to use .then and .catch , to handle this 

  Benefits of Promises:
            1) Clean code: avoid  callback hell
            2) Error handling 

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                    

4. What is async/await in JavaScript?
   Describe how async and await are used to handle asynchronous code.
   Answer ‚ñ∂Ô∏è async and await is used to handle asynchronous task in synchronous manner, its introduced in ESC2017, 
             ‚û°Ô∏èasync : declare a function as asynchronous, which means its return promises
             ‚û°Ô∏èawait : await pause the execution until promise is resolve or rejected

   Benefits ‚ñ∂Ô∏è it easier to readable
            ‚û°Ô∏è Error handling by try catch blocking
            ‚û°Ô∏è avoid promise chaining 

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
   
5. What are arrow functions in JavaScript?
   Explain the syntax and how arrow functions differ from traditional function expressions.
   Answer ‚ñ∂Ô∏è Arrow function is introduced in ESC16 , it is more concise syntax for writing function in javascript

   difference between Arrow function and normal function
          ‚û°Ô∏è this binding : in normal function this refer to how function is called , but in arrow function , this is inherit from 
                             surrounding lexical environment
          ‚û°Ô∏è No argument:  arrow function have not its own arguments , but normal function have
          ‚û°Ô∏è Cannot constructor : arrow function cannot use as constructor, but normal function can  

 ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                       


6. What is the difference between map, filter, and reduce in JavaScript?
   Provide examples of how each of these array methods is used.

   Answer ‚û°Ô∏è map, filter reduce is array powerful array methods , for manipulate and transforming array
         
          ‚û°Ô∏è map() : visit every element in array , and return new array , does'nt modify original array
          ‚û°Ô∏è filter() : visit every element in array , and return new array of elements those satisfy condition,return new array
          ‚û°Ô∏è Reduce() : it also visit every element in array , return accumulating value, not modify original array

 ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ         

7. What is prototypal inheritance in JavaScript?
   Describe how inheritance works in JavaScript using prototypes.
   Answer ‚ñ∂Ô∏è Prototypal inheritance in javascript is a feature that is allows you to inherit the property and methods from another object
            
   üîØHow inherits works using prototypesüîØ

   ‚û°Ô∏èprototype object  : every javascript has hidden property called prototype or _proto_ , which is point to another 
      object
   ‚û°Ô∏è prototypal chain : When you try to access the property or method from an object , javascript first  check main object
                        , if its not found then , js try to find  object prototype, still not able to found , js check all 
                         prototype object until its null

   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ         
                      

8. What is the difference between synchronous and asynchronous code in JavaScript?
   Explain the concepts with examples.
   Answer ‚ñ∂Ô∏è synchronous code : 1) synchronous code execute line by line , the next line code execute after current execution is
                                    complete
                                 2) its block main thread, until current operation is complete
                                 3) simple operation like variable assignment, mathematical operations

          ‚ñ∂Ô∏è asynchronous code : 1) asynchronous code run independently , without blocking main thread 
                                 2) its uses like , fetching data, file reading  

          üîØKey conceptsüîØ  
                          1) callbacks : callback function is passed as an arguments to asynchronous operation , once asynchronous task is completed ,
                           callback will execute
                                         
                          2) Promises : Promises is eventual completion or failure  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                                   

9. What is the DOM in JavaScript?
   Describe the Document Object Model and how JavaScript interacts with it.
   Answer ‚ñ∂Ô∏è Dom : Document object model  is programming interface for web Documents, it represents the structure of  web page in tree like
                   each  node is an object represents part of Document. such as  element , attribute, text content . the dom is allows you to 
                   access the element , manipulates the content   , structure and style of webpage

                   Note : DOM is not javascript , it is web api provided  by browser

          üîØKey points of DOM :          
                            ‚û°Ô∏èTree structure : 1) The DOM represents an HTML or XML  documents as tree of nodes , where each element , attribute, text 
                                               content is node of tree
                                               2) <HTML/> is root node of document
                                               3) <head/> and <body> is child nodes 
                            ‚û°Ô∏èObjects and nodes :e Elements and text in dom represent object    

           üîØHow JavaScript Interacts with the DOM :
                                                    ‚û°Ô∏è Accessing element: by using className, id , query selector 
                                                    ‚û°Ô∏è Manipulate the dom : changing content, changing attribute,changing style
                                                    ‚û°Ô∏è Create and Removing Elements : create , remove , append
                                                    ‚û°Ô∏è Event handling : addeventlistner
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ                                                    
                            

10. What is event delegation in JavaScript?
   Explain how event delegation works and why it can be useful.
   Answer ‚ñ∂Ô∏è Event delegation is technique in javascript where instead of adding individual event to each element , add single event to parent 
              the event listener take advantage bubbling and allowing  it to listen  event of child elements


          üîØ How event delegation works : 
                                         ‚û°Ô∏è Event bubbling : trigger event on element and then bubbles up to its parent , grandparent and so on 
                                                             it means parent element have an opportunity to catch the event 

                                                             - you can use event.target to determine which child is called 

          üîØ Use cases : 1) Performance :When many number of element , adding individual event to each , its very expensive and memory
                                         taking , in this case event delegation is useful , just add event to parent element
                         2) Dynamic element: When element adding or removing dynamically , in that case event delegation is useful
                         3) Cleaner code : Instead of managing multiple event listener, just manage event at parent level, so it will be more 
                                          cleaner code
